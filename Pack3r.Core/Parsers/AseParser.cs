using System.IO.Compression;
using System.Text.RegularExpressions;
using Pack3r.Extensions;
using Pack3r.IO;
using Pack3r.Logging;
using Pack3r.Models;

namespace Pack3r.Parsers;

public partial class AseParser(
    ILogger<AseParser> logger,
    ILineReader reader) : IReferenceParser
{
    public bool CanParse(ReadOnlyMemory<char> resource) => resource.EndsWithF(".ase");

    public Task<HashSet<Resource>?> Parse(string path, CancellationToken cancellationToken)
    {
        return ParseAse(
            path,
            reader.ReadLines(path, default, cancellationToken));
    }

    public Task<HashSet<Resource>?> Parse(ZipArchiveEntry entry, string archivePath, CancellationToken cancellationToken)
    {
        return ParseAse(
            Path.Combine(archivePath, entry.FullName),
            reader.ReadLines(archivePath, entry, default, cancellationToken));
    }

    private async Task<HashSet<Resource>?> ParseAse(string fullPath, IAsyncEnumerable<Line> lines)
    {
        var resouces = new HashSet<Resource>();

        await foreach (var line in lines)
        {
            if (Comment().IsMatch(line.Value.Span))
            {
                if (!line.Value.Span.Contains("Generated by Q3Map2", StringComparison.Ordinal))
                {
                    logger.Warn($"Unsupported .ASE model (not generated by Q3Map2): '{fullPath}'");
                    return null;
                }
            }
            else if (line.Value.Span.StartsWithF("*MAP_NAME"))
            {
                if (line.Value.TryReadPastWhitespace(out var token))
                {
                    resouces.Add(new(token.Trim('"'), IsShader: true));
                }
            }
            else if (line.Value.Span.StartsWithF("*GEOMOBJECT"))
            {
                break;
            }
        }

        return resouces;
    }

    [GeneratedRegex("""\*COMMENT\s""", RegexOptions.Singleline, 1000)]
    private static partial Regex Comment();
}
